Philosophy is “Simplicity is the best”.

Strings in Python------------------

# Assigning string to a variable
a = "This is a string"
print a

1. Strings are Immutable
Once a string is defined, it cannot be changed.
a = 'Geeks'
print a       # output is displayed
a[2] = 'E'
print a       # causes error
a = a + 'for'
print a # works fine

2. Three ways to create strings:
Strings in python can be created using single quotes or double quotes or a triple quotes .

a = 'Geeks' # string with single quotes
b = "for"   # string with double quotes
c = '''Geeks
a portal
for
geeks'''    # string with triple quotes

How to print single quote or double quote on screen?

print "Hi Mr Geek."
# use of escape sequence
print "He said, \"Welcome to GeeksforGeeks\""    
print 'Hey so happy to be here'
# use of mix quotes
print 'Getting Geeky, "Loving it"' 

# A python program to illustrate slicing in strings
x = "Geeks at work"
# Prints 3rd character beginning from 0
print x[2]  
# Prints 7th character
print x[6]  
# Prints 3rd character from rear beginning from -1
print x[-3] 
# Length of string is 10 so it is out of bound
print x[15] 

# A python program to illustrate
# print substrings of a string
x = "Welcome to GeeksforGeeks"
# Prints substring from 2nd to 5th character
print x[2:5]      
# Prints substring stepping up 2nd character 
# from 4th to 10th character
print x[4:10:2]    
# Prints 3rd character from rear from 3 to 5
print x[-5:-3]  

str1 = ''
str2 = 'geeks'
# repr is used to print the string along with the quotes
print repr(str1 and str2) # Returns str1 
print repr(str2 and str1) # Returns str1
print repr(str1 or str2) # Returns str2 
print repr(str2 or str1) # Returns str2
 
str1 = 'for'
print repr(str1 and str2) # Returns str2 
print repr(str2 and  str1) # Returns str1
print repr(str1 or str2) # Returns str1 
print repr(str2 or str1) # Returns str2





Lists in Python------------------
Lists are one of the most powerful tools in python. They are just like the arrays declared in other languages. But the most powerful thing is that list need not be always homogenous. A single list can contain strings, integers, as well as objects. Lists can also be used for implementing stacks and queues. Lists are mutable, i.e., they can be altered once declared.
# Declaring a list
L = [1, "a" , "string" , 1+2]
print L
L.append(6)
print L
L.pop()
print L
print L[1]

Tuples in Python
A tuple is a sequence of immutable Python objects. Tuples are just like lists with the exception that tuples cannot be changed once declared. Tuples are usually faster than lists.
tup = (1, "a", "string", 1+2)
print tup
print tup[1]

Iterations in Python
Iterations or looping can be performed in python by ‘for’ and ‘while’ loops. Apart from iterating upon a particular condition, we can also iterate on strings, lists, and tuples.
Example1: Iteration by while loop for a condition
i = 1
while (i < 10):
    i += 1
    print i,
Example 2: Iteration by for loop on string
s = "Hello World"
for i in s :
    print i
Example 3: Iteration by for loop on list
L = [1, 4, 5, 7, 8, 9]
for  i in L:
    print i,
Example 4 : Iteration by for loop for range
for  i in range(0, 10):
    print i,
    

