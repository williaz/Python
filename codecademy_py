STRING

 +---+---+---+---+---+---+
 | P | y | t | h | o | n |
 +---+---+---+---+---+---+
 0   1   2   3   4   5   6
-6  -5  -4  -3  -2  -1


len(parrot)
parrot.lower()
parrot.upper()
str(pi)

print "Spam"+" and "+"eggs"

print "Let's not go to %s. \'Tis a silly %s." % (string_1, string_2)


DICTIONARIES


residents = {'Puffin' : 104, 'Sloth' : 105, 'Burmese Python' : 106}

print residents['Puffin'] 

>>> a = dict(one=1, two=2, three=3)
>>> b = {'one': 1, 'two': 2, 'three': 3}
>>> c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))
>>> d = dict([('two', 2), ('one', 1), ('three', 3)])
>>> e = dict({'three': 3, 'one': 1, 'two': 2})
>>> a == b == c == d == e
True



LIST


Operation	Result	Notes
s[i] = x	item i of s is replaced by x	 
s[i:j] = t	slice of s from i to j is replaced by the contents of the iterable t	 
del s[i:j]	same as s[i:j] = []	 
s[i:j:k] = t	the elements of s[i:j:k] are replaced by those of t	(1)
del s[i:j:k]	removes the elements of s[i:j:k] from the list	 
s.append(x)	appends x to the end of the sequence (same as s[len(s):len(s)] = [x])	 
s.clear()	removes all items from s (same as del s[:])	
s.copy()	creates a shallow copy of s (same as s[:])	
s.extend(t) or s += t	extends s with the contents of t (for the most part the same as s[len(s):len(s)] = t)	 
s *= n	updates s with its contents repeated n times	
s.insert(i, x)	inserts x into s at the index given by i (same as s[i:i] = [x])	 
s.pop([i])	retrieves the item at i and also removes it from s	
s.remove(x)	remove the first item from s where s[i] == x	
s.reverse()	reverses the items of s in place	






BITWISE

Bitwise operations are operations that directly manipulate bits. In all computers, numbers are represented with bits, a series of zeros and ones. In fact, pretty much everything in a computer is represented by bits. 

8's bit  4's bit  2's bit  1's bit
    1       0       1      0 
    8   +   0    +  2   +  0  = 10 
    
eleven =0b1011

 bin() takes an integer as input and returns the binary representation of that integer in a string. (Keep in mind that after using the bin function, you can no longer operate on the value like a number.) You can also represent numbers in base 8 and base 16 using the oct() and hex() functions.
 
int("110", 2)
# ==> 6 When given a string containing a number and the base that number is in, the function will return the value of that number converted to base ten.

# Left Bit Shift (<<)  
0b000001 << 2 == 0b000100 (1 << 2 = 4)
0b000101 << 3 == 0b101000 (5 << 3 = 40)       

# Right Bit Shift (>>)
0b0010100 >> 3 == 0b000010 (20 >> 3 = 2)
0b0000010 >> 2 == 0b000000 (2 >> 2 = 0) 
Note that you can only do bitwise operations on an integer. Trying to do them on strings or floats will result in nonsensical output!

     a:   00101010   42
     b:   00001111   15       
===================
 a & b:   00001010   10
 
    a:  00101010   42
    b:  00001111   15       
================
a ^ b:  00100101   37
if either of the corresponding bits of the two numbers are 1, but not both.

The bitwise NOT operator (~) just flips all of the bits in a single number. This is equivalent to adding one to the number and then making it negative.

a = 0b101 
# Tenth bit mask
mask = (0b1 << 9)  # One less than ten 
desired = a ^ mask


CLASS


(pass doesn't do anything, but it's useful as a placeholder in areas of your code where Python expects an expression.)

__init__(). This function is required for classes, and it's used to initialize the objects it creates. __init__() always takes at least one argument, self, that refers to the object being created. 

class's methods always takes at least one argument, self, that refers to the object being created. 

You can directly access the attributes or methods of a superclass with Python's built-in super call.

Normally we use object as the parent class because it is the most basic type of class, but by specifying a different class, we can inherit more complicated functionality.

One useful class method to override is the built-in __repr__() method, which is short for representation; by providing a return value in this method, we can tell Python how to represent an object of our class (for instance, when using a print statement).


FILE I/O


You must close the file. You do this simply by calling my_file.close() . If you don't close your file, Python won't write to it properly. 

with open("file", "mode") as variable:
    # Read or write to the file
    #file objects contain a special pair of built-in methods: __enter__() and __exit__(). The details aren't important, but what is important is that when a file object's __exit__() method is invoked, it automatically closes the file. 
